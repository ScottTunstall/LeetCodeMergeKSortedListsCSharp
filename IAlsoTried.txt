    public class Solution
    {
        private ListNode[] _lists;

        public ListNode MergeKLists(ListNode[] lists)
        {
            _lists = lists;

            if (_lists.Length == 0)
                return null;

            ListNode head = UnqueueNodeWithMinValue();
            if (head == null)
                return null;
            
            ListNode tail = head;

            ListNode nextNode;
            while ((nextNode = UnqueueNodeWithMinValue()) != null)
            {
                tail.next = nextNode;
                tail = tail.next;
            }

            return head;
        }

        private ListNode UnqueueNodeWithMinValue()
        {
            int minVal = int.MaxValue;
            ListNode nodeWithMinValue = null;
            ListNode replacementHeadForNodeWithMinValue = null;
            int indexOfListWithMinVal = 0;

            for (int i = 0; i < _lists.Length; i++)
            {
                var item = _lists[i];
                if (item!=null && item.val < minVal)
                {
                    nodeWithMinValue = item;
                    replacementHeadForNodeWithMinValue = nodeWithMinValue.next;
                    indexOfListWithMinVal = i;
                    minVal = item.val;
                }
            }

            // Replace head of list[indexOfListWithMinVal
            _lists[indexOfListWithMinVal] = replacementHeadForNodeWithMinValue;

            return nodeWithMinValue;
        }
    }